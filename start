#!/usr/local/bin/python

"""Usage:
   start [--username=<username>] [--domain=<domain>] [--password=<password>] [--directory=<directory>] [--red=<integer>] [--green=<integer>] [--blue=<integer>] [--grayvariation=<integer>] [--verbose] [--testing]

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

from docopt import docopt
from subprocess import call
import cv2
import getpass
import numpy
import os
import sys
import textwrap

def crop_out_ruler(inputfile, outputfile, ruler_color, grayvariation, verbose=False, testing=False):
    morph_open_kernel = numpy.ones((5, 5), numpy.uint8)
    morph_close_kernel = numpy.ones((20, 20), numpy.uint8)
    border_width = 100
    nudge_crop_in = 10
    test_color = (255, 0, 0)
    test_width = 20
    
    if verbose:
        print('loading {}'.format(inputfile))
    img = cv2.imread(inputfile)
    if img is None:
        raise ValueError
    if not img.any():
        raise ValueError
    
    if verbose:
        print('selecting gray objects.')
    lower_limit_for_gray = numpy.array([ruler_color[0] - grayvariation, ruler_color[1] - grayvariation, ruler_color[2] - grayvariation], dtype = numpy.uint8)
    upper_limit_for_gray = numpy.array([ruler_color[0] + grayvariation, ruler_color[1] + grayvariation, ruler_color[2] + grayvariation], dtype = numpy.uint8)
    gray_only = cv2.inRange(img, lower_limit_for_gray, upper_limit_for_gray)
    
    if verbose:
        print('despeckling to remove noise.')
    gray_only = cv2.morphologyEx(gray_only, cv2.MORPH_OPEN, morph_open_kernel)
    
    if verbose:
        print('filling in gaps to remove noise.')
    gray_only = cv2.morphologyEx(gray_only, cv2.MORPH_CLOSE, morph_close_kernel)
    
    if verbose:
        print('adding a border.')
    gray_only = cv2.copyMakeBorder(gray_only, border_width, border_width, border_width, border_width, cv2.BORDER_CONSTANT, value=[0, 0, 0])
    
    if verbose:
        print('getting a bitonal image.')
    ret, threshold = cv2.threshold(gray_only, 127, 255, cv2.THRESH_BINARY)
    
    if verbose:
        print('getting contours.')
    _, contours, hierarchy = cv2.findContours(threshold.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    ruler = None
    
    if verbose:
        print('find the largest countour with four sides- assume it is the ruler.')    
    contours = sorted(contours, key = cv2.contourArea, reverse = True)[:10]
    for c in contours:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            # remember to take off the 100 pixel boundary we added above. 
            ruler = numpy.array(list(map(lambda c: [[c[0][0] - border_width, c[0][1] - border_width]], approx)))
            break
    
    if ruler is not None:
        if verbose:
            print('found ruler.')
        # draw a box around it. 
        if testing:
            cv2.drawContours(img, [ruler], -1, test_color, test_width)
    
        if verbose:
            print('get x coordinates of all points in ruler, sort so the one closes to the center of the image is first.')
        height, width, channels = img.shape
        points_x_coordinates = list(map(lambda c: c[0][0], ruler.tolist()))
        points_x_coordinates = list(sorted(points_x_coordinates, key=lambda x: abs(width - x)))
    
        if verbose:
            print('get the lowest or highest coordinate depending on which side of the page the ruler is on.')
        if points_x_coordinates[0] > width / 2:
            x = points_x_coordinates[-1]
        else:
            x = points_x_coordinates[0]
    
        if testing:
            if verbose:
                print('testing mode: draw a line.')
            cv2.line(img, (x, 0), (x, height), test_color, test_width)
   
        if testing:
            if verbose: 
                print('output an image with test lines only.')
            cv2.imwrite(outputfile, img)
        else:
            if verbose:
                print('crop the ruler out of the left or right side of the image.')
            if x < width / 2:
                cv2.imwrite(outputfile, img[0:height, x + nudge_crop_in:width])
            else:
                cv2.imwrite(outputfile, img[0:height, 0:x - nudge_crop_in])
    

if __name__ == '__main__':
    args = docopt(__doc__)

    environmental_variables = {
        '--username':      'PRES_CROP_SMB_USERNAME',
        '--domain':        'PRES_CROP_SMB_DOMAIN',
        '--password':      'PRES_CROP_SMB_PASSWORD',
        '--red':           'PRES_CROP_RED',
        '--green':         'PRES_CROP_GREEN',
        '--blue':          'PRES_CROP_BLUE',
        '--grayvariation': 'PRES_CROP_GRAY_VARIATION',
        '--directory':     'PRES_CROP_DIRECTORY',
        '--testing':       'PRES_CROP_TESTING',
        '--verbose':       'PRES_CROP_VERBOSE'
    }

    for a, v in args.items():
        if v is None:
            try:
                args[a] = os.environ[environmental_variables[a]]
            except KeyError:
                print('The {} environmental variable is not set.'.format(environmental_variables[a]))
                sys.exit()

    for a in ('--red', '--green', '--blue', '--grayvariation'):
        args[a] = int(args[a])

    for a in ('--verbose', '--testing'):
        if args[a] in (True, 'true', 'True', 1):
            args[a] = True
        elif args[a] in (False, 'false', 'False', 0):
            args[a] = False
        else:
            raise ValueError

    call([
        'mount',
        '-t',
        'cifs',
        '//monsoon.lib.uchicago.edu/pres',
        '/mnt/pres',
        '-o', 
        'user={},pass={},dom={}'.format(args['--username'], args['--password'], args['--domain'])
    ])

    input_directory = '/mnt/pres/{}/Masters'.format(args['--directory'])
    if not os.path.isdir(input_directory):
        print('input directory {} does not exist.'.format(input_directory))
        sys.exit()

    output_directory = '/mnt/pres/{}/Tiff Crop'.format(args['--directory'])
    if not os.path.isdir(output_directory):
        os.mkdir(output_directory)

    for f in os.listdir(input_directory):
        if not os.path.isfile('{}/{}'.format(output_directory, f)):
            try:
                print(f)
                crop_out_ruler(
                    '{}/{}'.format(input_directory, f),
                    '{}/{}'.format(output_directory, f),
                    [args['--red'], args['--green'], args['--blue']],
                    args['--grayvariation'],
                    verbose,
                    testing
                )
            except (AttributeError, ValueError):
                print('Problem trying to crop {}'.format(f))
                continue
